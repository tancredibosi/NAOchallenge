# Choregraphe bezier export in Python.
from naoqi import ALProxy
import sys
def main(robotIP, port):  
  names = list()
  times = list()
  keys = list()

  names.append("HeadPitch")
  times.append([0.733333, 4.13333])
  keys.append([[-0.00771196, [3, -0.266667, 0], [3, 1.13333, 0]], [-0.00771196, [3, -1.13333, 0], [3, 0, 0]]])

  names.append("HeadYaw")
  times.append([0.733333, 4.13333])
  keys.append([[-0.00157596, [3, -0.266667, 0], [3, 1.13333, 0]], [-0.00157596, [3, -1.13333, 0], [3, 0, 0]]])

  names.append("LAnklePitch")
  times.append([0.733333, 4.13333])
  keys.append([[-0.0922134, [3, -0.266667, 0], [3, 1.13333, 0]], [-0.0922134, [3, -1.13333, 0], [3, 0, 0]]])

  names.append("LAnkleRoll")
  times.append([0.733333, 4.13333])
  keys.append([[0.0046224, [3, -0.266667, 0], [3, 1.13333, 0]], [0.0046224, [3, -1.13333, 0], [3, 0, 0]]])

  names.append("LElbowRoll")
  times.append([0.733333, 1.06667, 1.33333, 1.6, 1.86667, 2.13333, 2.4, 2.66667, 2.93333, 3.2, 3.46667, 4.13333])
  keys.append([[-0.312894, [3, -0.266667, 0], [3, 0.111111, 0]], [-1.20253, [3, -0.111111, 0], [3, 0.0888889, 0]], [-1.20253, [3, -0.0888889, 0], [3, 0.0888889, 0]], [-1.20253, [3, -0.0888889, 0], [3, 0.0888889, 0]], [-1.20253, [3, -0.0888889, 0], [3, 0.0888889, 0]], [-1.20253, [3, -0.0888889, 0], [3, 0.0888889, 0]], [-1.20253, [3, -0.0888889, 0], [3, 0.0888889, 0]], [-1.20253, [3, -0.0888889, 0], [3, 0.0888889, 0]], [-1.20253, [3, -0.0888889, 0], [3, 0.0888889, 0]], [-1.20253, [3, -0.0888889, 0], [3, 0.0888889, 0]], [-1.20253, [3, -0.0888889, 0], [3, 0.222222, 0]], [-0.312894, [3, -0.222222, 0], [3, 0, 0]]])

  names.append("LElbowYaw")
  times.append([0.733333, 1.06667, 1.2, 1.33333, 1.46667, 1.6, 1.73333, 1.86667, 2, 2.13333, 2.26667, 2.4, 2.53333, 2.66667, 2.8, 2.93333, 3.06667, 3.2, 3.33333, 3.46667, 4.13333])
  keys.append([[-0.770111, [3, -0.266667, 0], [3, 0.111111, 0]], [-0.541052, [3, -0.111111, 0], [3, 0.0444444, 0]], [-0.907571, [3, -0.0444444, 0], [3, 0.0444444, 0]], [-0.541052, [3, -0.0444444, 0], [3, 0.0444444, 0]], [-0.907571, [3, -0.0444444, 0], [3, 0.0444444, 0]], [-0.541052, [3, -0.0444444, 0], [3, 0.0444444, 0]], [-0.907571, [3, -0.0444444, 0], [3, 0.0444444, 0]], [-0.541052, [3, -0.0444444, 0], [3, 0.0444444, 0]], [-0.907571, [3, -0.0444444, 0], [3, 0.0444444, 0]], [-0.541052, [3, -0.0444444, 0], [3, 0.0444444, 0]], [-0.907571, [3, -0.0444444, 0], [3, 0.0444444, 0]], [-0.541052, [3, -0.0444444, 0], [3, 0.0444444, 0]], [-0.907571, [3, -0.0444444, 0], [3, 0.0444444, 0]], [-0.541052, [3, -0.0444444, 0], [3, 0.0444444, 0]], [-0.907571, [3, -0.0444444, 0], [3, 0.0444444, 0]], [-0.541052, [3, -0.0444444, 0], [3, 0.0444444, 0]], [-0.907571, [3, -0.0444444, 0], [3, 0.0444444, 0]], [-0.541052, [3, -0.0444444, 0], [3, 0.0444444, 0]], [-0.907571, [3, -0.0444444, 0], [3, 0.0444444, 0]], [-0.541052, [3, -0.0444444, 0], [3, 0.222222, 0]], [-0.770111, [3, -0.222222, 0], [3, 0, 0]]])

  names.append("LHand")
  times.append([0.733333, 1.06667, 1.33333, 1.6, 1.86667, 2.13333, 2.4, 2.66667, 2.93333, 3.2, 3.46667, 4.13333])
  keys.append([[0.916751, [3, -0.266667, 0], [3, 0.111111, 0]], [0.945455, [3, -0.111111, 0], [3, 0.0888889, 0]], [0.945455, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.945455, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.945455, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.945455, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.945455, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.945455, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.945455, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.945455, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.945455, [3, -0.0888889, 0], [3, 0.222222, 0]], [0.916751, [3, -0.222222, 0], [3, 0, 0]]])

  names.append("LHipPitch")
  times.append([0.733333, 4.13333])
  keys.append([[0.0442645, [3, -0.266667, 0], [3, 1.13333, 0]], [0.0442645, [3, -1.13333, 0], [3, 0, 0]]])

  names.append("LHipRoll")
  times.append([0.733333, 4.13333])
  keys.append([[-0.0155321, [3, -0.266667, 0], [3, 1.13333, 0]], [-0.0155321, [3, -1.13333, 0], [3, 0, 0]]])

  names.append("LHipYawPitch")
  times.append([0.733333, 4.13333])
  keys.append([[0.00916048, [3, -0.266667, 0], [3, 1.13333, 0]], [0.00916048, [3, -1.13333, 0], [3, 0, 0]]])

  names.append("LKneePitch")
  times.append([0.733333, 4.13333])
  keys.append([[0.0564382, [3, -0.266667, 0], [3, 1.13333, 0]], [0.0564382, [3, -1.13333, 0], [3, 0, 0]]])

  names.append("LShoulderPitch")
  times.append([0.733333, 1.06667, 1.33333, 1.6, 1.86667, 2.13333, 2.4, 2.66667, 2.93333, 3.2, 3.46667, 4.13333])
  keys.append([[1.57231, [3, -0.266667, 0], [3, 0.111111, 0]], [0.994838, [3, -0.111111, 0], [3, 0.0888889, 0]], [0.994838, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.994838, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.994838, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.994838, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.994838, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.994838, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.994838, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.994838, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.994838, [3, -0.0888889, 0], [3, 0.222222, 0]], [1.57231, [3, -0.222222, 0], [3, 0, 0]]])

  names.append("LShoulderRoll")
  times.append([0.733333, 1.06667, 1.33333, 1.6, 1.86667, 2.13333, 2.4, 2.66667, 2.93333, 3.2, 3.46667, 4.13333])
  keys.append([[0.31903, [3, -0.266667, 0], [3, 0.111111, 0]], [0, [3, -0.111111, 0], [3, 0.0888889, 0]], [0, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0, [3, -0.0888889, 0], [3, 0.222222, 0]], [0.31903, [3, -0.222222, 0], [3, 0, 0]]])

  names.append("LWristYaw")
  times.append([0.733333, 1.06667, 1.33333, 1.6, 1.86667, 2.13333, 2.4, 2.66667, 2.93333, 3.2, 3.46667, 4.13333])
  keys.append([[-1.00941, [3, -0.266667, 0], [3, 0.111111, 0]], [0.254818, [3, -0.111111, 0], [3, 0.0888889, 0]], [0.254818, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.254818, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.254818, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.254818, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.254818, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.254818, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.254818, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.254818, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.254818, [3, -0.0888889, 0], [3, 0.222222, 0]], [-1.00941, [3, -0.222222, 0], [3, 0, 0]]])

  names.append("RAnklePitch")
  times.append([0.733333, 4.13333])
  keys.append([[-0.0889992, [3, -0.266667, 0], [3, 1.13333, 0]], [-0.0889992, [3, -1.13333, 0], [3, 0, 0]]])

  names.append("RAnkleRoll")
  times.append([0.733333, 4.13333])
  keys.append([[-0.00149427, [3, -0.266667, 0], [3, 1.13333, 0]], [-0.00149427, [3, -1.13333, 0], [3, 0, 0]]])

  names.append("RElbowRoll")
  times.append([0.733333, 1.06667, 1.2, 1.33333, 1.46667, 1.6, 1.73333, 1.86667, 2, 2.13333, 2.26667, 2.4, 2.53333, 2.66667, 2.8, 2.93333, 3.06667, 3.2, 3.33333, 3.46667, 4.13333])
  keys.append([[0.308375, [3, -0.266667, 0], [3, 0.111111, 0]], [1.09956, [3, -0.111111, 0], [3, 0.0444444, 0]], [0.787143, [3, -0.0444444, 0], [3, 0.0444444, 0]], [1.09956, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.787143, [3, -0.0444444, 0], [3, 0.0444444, 0]], [1.09956, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.787143, [3, -0.0444444, 0], [3, 0.0444444, 0]], [1.09956, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.787143, [3, -0.0444444, 0], [3, 0.0444444, 0]], [1.09956, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.787143, [3, -0.0444444, 0], [3, 0.0444444, 0]], [1.09956, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.787143, [3, -0.0444444, 0], [3, 0.0444444, 0]], [1.09956, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.787143, [3, -0.0444444, 0], [3, 0.0444444, 0]], [1.09956, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.787143, [3, -0.0444444, 0], [3, 0.0444444, 0]], [1.09956, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.787143, [3, -0.0444444, 0], [3, 0.0444444, 0]], [1.09956, [3, -0.0444444, 0], [3, 0.222222, 0]], [0.308375, [3, -0.222222, 0], [3, 0, 0]]])

  names.append("RElbowYaw")
  times.append([0.733333, 1.06667, 1.2, 1.33333, 1.46667, 1.6, 1.73333, 1.86667, 2, 2.13333, 2.26667, 2.4, 2.53333, 2.66667, 2.8, 2.93333, 3.06667, 3.2, 3.33333, 3.46667, 4.13333])
  keys.append([[0.770025, [3, -0.266667, 0], [3, 0.111111, 0]], [0.541052, [3, -0.111111, 0.0567232], [3, 0.0444444, -0.0226893]], [0.518363, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.541052, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.518363, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.541052, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.518363, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.541052, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.518363, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.541052, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.518363, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.541052, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.518363, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.541052, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.518363, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.541052, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.518363, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.541052, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.518363, [3, -0.0444444, 0], [3, 0.0444444, 0]], [0.541052, [3, -0.0444444, -0.0139813], [3, 0.222222, 0.0699063]], [0.770025, [3, -0.222222, 0], [3, 0, 0]]])

  names.append("RHand")
  times.append([0.733333, 1.06667, 1.33333, 1.6, 1.86667, 2.13333, 2.4, 2.66667, 2.93333, 3.2, 3.46667, 4.13333])
  keys.append([[0.917114, [3, -0.266667, 0], [3, 0.111111, 0]], [0.945455, [3, -0.111111, 0], [3, 0.0888889, 0]], [0.945455, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.945455, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.945455, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.945455, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.945455, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.945455, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.945455, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.945455, [3, -0.0888889, 0], [3, 0.0888889, 0]], [0.945455, [3, -0.0888889, 0], [3, 0.222222, 0]], [0.917114, [3, -0.222222, 0], [3, 0, 0]]])

  names.append("RHipPitch")
  times.append([0.733333, 4.13333])
  keys.append([[0.032157, [3, -0.266667, 0], [3, 1.13333, 0]], [0.032157, [3, -1.13333, 0], [3, 0, 0]]])

  names.append("RHipRoll")
  times.append([0.733333, 4.13333])
  keys.append([[0.0046224, [3, -0.266667, 0], [3, 1.13333, 0]], [0.0046224, [3, -1.13333, 0], [3, 0, 0]]])

  names.append("RKneePitch")
  times.append([0.733333, 4.13333])
  keys.append([[0.0624798, [3, -0.266667, 0], [3, 1.13333, 0]], [0.0624798, [3, -1.13333, 0], [3, 0, 0]]])

  names.append("RShoulderPitch")
  times.append([0.733333, 1.06667, 1.33333, 1.6, 1.86667, 2.13333, 2.4, 2.66667, 2.93333, 3.2, 3.46667, 4.13333])
  keys.append([[1.57239, [3, -0.266667, 0], [3, 0.111111, 0]], [1.09956, [3, -0.111111, 0], [3, 0.0888889, 0]], [1.09956, [3, -0.0888889, 0], [3, 0.0888889, 0]], [1.09956, [3, -0.0888889, 0], [3, 0.0888889, 0]], [1.09956, [3, -0.0888889, 0], [3, 0.0888889, 0]], [1.09956, [3, -0.0888889, 0], [3, 0.0888889, 0]], [1.09956, [3, -0.0888889, 0], [3, 0.0888889, 0]], [1.09956, [3, -0.0888889, 0], [3, 0.0888889, 0]], [1.09956, [3, -0.0888889, 0], [3, 0.0888889, 0]], [1.09956, [3, -0.0888889, 0], [3, 0.0888889, 0]], [1.09956, [3, -0.0888889, 0], [3, 0.222222, 0]], [1.57239, [3, -0.222222, 0], [3, 0, 0]]])

  names.append("RShoulderRoll")
  times.append([0.733333, 1.06667, 1.33333, 1.6, 1.86667, 2.13333, 2.4, 2.66667, 2.93333, 3.2, 3.46667, 4.13333])
  keys.append([[-0.309909, [3, -0.266667, 0], [3, 0.111111, 0]], [-0.0942478, [3, -0.111111, 0], [3, 0.0888889, 0]], [-0.0942478, [3, -0.0888889, 0], [3, 0.0888889, 0]], [-0.0942478, [3, -0.0888889, 0], [3, 0.0888889, 0]], [-0.0942478, [3, -0.0888889, 0], [3, 0.0888889, 0]], [-0.0942478, [3, -0.0888889, 0], [3, 0.0888889, 0]], [-0.0942478, [3, -0.0888889, 0], [3, 0.0888889, 0]], [-0.0942478, [3, -0.0888889, 0], [3, 0.0888889, 0]], [-0.0942478, [3, -0.0888889, 0], [3, 0.0888889, 0]], [-0.0942478, [3, -0.0888889, 0], [3, 0.0888889, 0]], [-0.0942478, [3, -0.0888889, 0], [3, 0.222222, 0]], [-0.309909, [3, -0.222222, 0], [3, 0, 0]]])

  names.append("RWristYaw")
  times.append([0.733333, 1.06667, 1.33333, 1.6, 1.86667, 2.13333, 2.4, 2.66667, 2.93333, 3.2, 3.46667, 4.13333])
  keys.append([[0.989389, [3, -0.266667, 0], [3, 0.111111, 0]], [1.22173, [3, -0.111111, 0], [3, 0.0888889, 0]], [1.22173, [3, -0.0888889, 0], [3, 0.0888889, 0]], [1.22173, [3, -0.0888889, 0], [3, 0.0888889, 0]], [1.22173, [3, -0.0888889, 0], [3, 0.0888889, 0]], [1.22173, [3, -0.0888889, 0], [3, 0.0888889, 0]], [1.22173, [3, -0.0888889, 0], [3, 0.0888889, 0]], [1.22173, [3, -0.0888889, 0], [3, 0.0888889, 0]], [1.22173, [3, -0.0888889, 0], [3, 0.0888889, 0]], [1.22173, [3, -0.0888889, 0], [3, 0.0888889, 0]], [1.22173, [3, -0.0888889, 0], [3, 0.222222, 0]], [0.989389, [3, -0.222222, 0], [3, 0, 0]]])

  try:
  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
  # motion = ALProxy("ALMotion", IP, 9559)
    motion = ALProxy("ALMotion", robotIP, port)
    motion.angleInterpolationBezier(names, times, keys)
  except BaseException, err:
    print err


if __name__ == "__main__":

  robotIP = "127.0.0.1" #"192.168.1.11"

  port = 9559 # Insert NAO port

  if len(sys.argv) == 2:
    robotIP = sys.argv[1]
  elif len(sys.argv) > 2:
    port = int(sys.argv[2])
    robotIP = sys.argv[1]

  main(robotIP, port)