# Choregraphe bezier export in Python.
from naoqi import ALProxy
import sys
def main(robotIP, port):
    names = list()
    times = list()
    keys = list()

    names.append("HeadPitch")
    times.append([1.2, 2.73333, 2.93333, 3.46667, 3.73333, 4.4, 4.6, 5.2, 5.4, 6, 6.2, 6.8, 7, 7.53333, 7.73333, 8.33333, 8.53333, 9.13333, 9.33333, 9.93333, 10.1333, 10.7333, 10.9333, 11.6, 11.8, 12.4, 12.6, 13.2, 13.3333, 13.9333, 14.1333])
    keys.append([[0.0797261, [3, -0.422222, 0], [3, 0.511111, 0]], [-0.055266, [3, -0.511111, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.177778, 0]], [-0.055266, [3, -0.177778, 0], [3, 0.0888889, 0]], [0.191709, [3, -0.0888889, 0], [3, 0.222222, 0]], [-0.055266, [3, -0.222222, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.055266, [3, -0.2, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.055266, [3, -0.2, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.055266, [3, -0.2, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.177778, 0]], [-0.055266, [3, -0.177778, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.055266, [3, -0.2, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.055266, [3, -0.2, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.055266, [3, -0.2, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.055266, [3, -0.2, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.222222, 0]], [-0.055266, [3, -0.222222, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.055266, [3, -0.2, 0], [3, 0.0666667, 0]], [0.191709, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.055266, [3, -0.2, 0], [3, 0.0444444, 0]], [0.191709, [3, -0.0444444, 0], [3, 0.2, 0]], [-0.22554, [3, -0.2, 0], [3, 0.0666667, 0]], [0.0812601, [3, -0.0666667, 0], [3, 0, 0]]])

    names.append("HeadYaw")
    times.append([1.2, 2.73333, 2.93333, 3.46667, 3.73333, 4.4, 4.6, 5.2, 5.4, 6, 6.2, 6.8, 7, 7.53333, 7.73333, 8.33333, 8.53333, 9.13333, 9.33333, 9.93333, 10.1333, 10.7333, 10.9333, 11.6, 11.8, 12.4, 12.6, 13.2, 13.3333, 13.9333, 14.1333])
    keys.append([[-0.108956, [3, -0.422222, 0], [3, 0.511111, 0]], [-0.20253, [3, -0.511111, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.177778, 0]], [-0.20253, [3, -0.177778, 0], [3, 0.0888889, 0]], [-0.176453, [3, -0.0888889, 0], [3, 0.222222, 0]], [-0.20253, [3, -0.222222, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.20253, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.20253, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.20253, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.177778, 0]], [-0.20253, [3, -0.177778, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.20253, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.20253, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.20253, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.20253, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.222222, 0]], [-0.20253, [3, -0.222222, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.20253, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.20253, [3, -0.2, 0], [3, 0.0444444, 0]], [-0.176453, [3, -0.0444444, 0], [3, 0.2, 0]], [-0.428028, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.108956, [3, -0.0666667, 0], [3, 0, 0]]])

    names.append("LAnklePitch")
    times.append([1.2, 1.6])
    keys.append([[-0.374338, [3, -0.422222, 0], [3, 0.133333, 0]], [-0.374338, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LAnkleRoll")
    times.append([1.2, 1.6])
    keys.append([[0.016916, [3, -0.422222, 0], [3, 0.133333, 0]], [0.016916, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LElbowRoll")
    times.append([1.2, 1.86667, 2.06667, 2.26667, 2.73333, 2.93333, 3.46667, 3.73333, 4.4, 4.6, 5.2, 5.4, 6, 6.2, 6.8, 7, 7.53333, 7.73333, 8.33333, 8.53333, 9.13333, 9.33333, 9.93333, 10.1333, 10.7333, 10.9333, 11.6, 11.8, 12.4, 12.6, 13.2, 13.3333, 13.9333, 14.1333, 14.5333])
    keys.append([[-1.03541, [3, -0.422222, 0], [3, 0.222222, 0]], [-1.05688, [3, -0.222222, 0], [3, 0.0666667, 0]], [-1.05688, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.155556, 0]], [-1.05688, [3, -0.155556, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.177778, 0]], [-1.05688, [3, -0.177778, 0], [3, 0.0888889, 0]], [-1.04461, [3, -0.0888889, 0], [3, 0.222222, 0]], [-1.05688, [3, -0.222222, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.05688, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.05688, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.05688, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.177778, 0]], [-1.05688, [3, -0.177778, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.05688, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.05688, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.05688, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.05688, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.222222, 0]], [-1.05688, [3, -0.222222, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.05688, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.05688, [3, -0.2, 0], [3, 0.0444444, 0]], [-1.04461, [3, -0.0444444, 0], [3, 0.2, 0]], [-1.05688, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.133333, 0]], [-1.04461, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LElbowYaw")
    times.append([1.2, 1.86667, 2.06667, 2.26667, 2.73333, 2.93333, 3.46667, 3.73333, 4.4, 4.6, 5.2, 5.4, 6, 6.2, 6.8, 7, 7.53333, 7.73333, 8.33333, 8.53333, 9.13333, 9.33333, 9.93333, 10.1333, 10.7333, 10.9333, 11.6, 11.8, 12.4, 12.6, 13.2, 13.3333, 13.9333, 14.1333, 14.5333])
    keys.append([[-1.76261, [3, -0.422222, 0], [3, 0.222222, 0]], [-1.75341, [3, -0.222222, 0], [3, 0.0666667, 0]], [-1.75495, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.155556, 0]], [-1.75495, [3, -0.155556, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.177778, 0]], [-1.75495, [3, -0.177778, 0], [3, 0.0888889, 0]], [-1.75034, [3, -0.0888889, 0], [3, 0.222222, 0]], [-1.75495, [3, -0.222222, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.75495, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.75495, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.75495, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.177778, 0]], [-1.75495, [3, -0.177778, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.75495, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.75495, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.75495, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.75495, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.222222, 0]], [-1.75495, [3, -0.222222, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.75495, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.2, 0]], [-1.75495, [3, -0.2, 0], [3, 0.0444444, 0]], [-1.75034, [3, -0.0444444, 0], [3, 0.2, 0]], [-1.75495, [3, -0.2, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.133333, 0]], [-1.75034, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LHand")
    times.append([1.2])
    keys.append([[0.920024, [3, -0.422222, 0], [3, 0, 0]]])

    names.append("LHipPitch")
    times.append([1.2, 1.6])
    keys.append([[-0.162562, [3, -0.422222, 0], [3, 0.133333, 0]], [-0.162562, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LHipRoll")
    times.append([1.2, 1.6])
    keys.append([[0.101286, [3, -0.422222, 0], [3, 0.133333, 0]], [0.101286, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LHipYawPitch")
    times.append([1.2, 1.6])
    keys.append([[-0.395731, [3, -0.422222, 0], [3, 0.133333, 0]], [-0.395731, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LKneePitch")
    times.append([1.2, 1.6])
    keys.append([[0.789967, [3, -0.422222, 0], [3, 0.133333, 0]], [0.789967, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LShoulderPitch")
    times.append([1.2, 1.86667, 2.06667, 2.26667, 2.73333, 2.93333, 3.46667, 3.73333, 4.4, 4.6, 5.2, 5.4, 6, 6.2, 6.8, 7, 7.53333, 7.73333, 8.33333, 8.53333, 9.13333, 9.33333, 9.93333, 10.1333, 10.7333, 10.9333, 11.6, 11.8, 12.4, 12.6, 13.2, 13.3333, 13.9333, 14.1333, 14.5333])
    keys.append([[0.745483, [3, -0.422222, 0], [3, 0.222222, 0]], [0.733209, [3, -0.222222, 0], [3, 0.0666667, 0]], [0.743948, [3, -0.0666667, -0.00460214], [3, 0.0666667, 0.00460214]], [0.760822, [3, -0.0666667, 0], [3, 0.155556, 0]], [0.743948, [3, -0.155556, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.177778, 0]], [0.743948, [3, -0.177778, 0], [3, 0.0888889, 0]], [0.760822, [3, -0.0888889, 0], [3, 0.222222, 0]], [0.743948, [3, -0.222222, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.2, 0]], [0.743948, [3, -0.2, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.2, 0]], [0.743948, [3, -0.2, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.2, 0]], [0.743948, [3, -0.2, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.177778, 0]], [0.743948, [3, -0.177778, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.2, 0]], [0.743948, [3, -0.2, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.2, 0]], [0.743948, [3, -0.2, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.2, 0]], [0.743948, [3, -0.2, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.2, 0]], [0.743948, [3, -0.2, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.222222, 0]], [0.743948, [3, -0.222222, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.2, 0]], [0.743948, [3, -0.2, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.2, 0]], [0.743948, [3, -0.2, 0], [3, 0.0444444, 0]], [0.760822, [3, -0.0444444, 0], [3, 0.2, 0]], [0.743948, [3, -0.2, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.133333, 0]], [0.760822, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LShoulderRoll")
    times.append([1.2, 1.86667, 2.26667, 2.93333, 3.73333, 4.6, 5.4, 6.2, 7, 7.73333, 8.53333, 9.33333, 10.1333, 10.9333, 11.8, 12.6, 13.3333, 14.1333, 14.5333])
    keys.append([[0.515382, [3, -0.422222, 0], [3, 0.222222, 0]], [0.516916, [3, -0.222222, 0], [3, 0.133333, 0]], [0.501576, [3, -0.133333, 0], [3, 0.222222, 0]], [0.501576, [3, -0.222222, 0], [3, 0.266667, 0]], [0.501576, [3, -0.266667, 0], [3, 0.288889, 0]], [0.501576, [3, -0.288889, 0], [3, 0.266667, 0]], [0.501576, [3, -0.266667, 0], [3, 0.266667, 0]], [0.501576, [3, -0.266667, 0], [3, 0.266667, 0]], [0.501576, [3, -0.266667, 0], [3, 0.244444, 0]], [0.501576, [3, -0.244444, 0], [3, 0.266667, 0]], [0.501576, [3, -0.266667, 0], [3, 0.266667, 0]], [0.501576, [3, -0.266667, 0], [3, 0.266667, 0]], [0.501576, [3, -0.266667, 0], [3, 0.266667, 0]], [0.501576, [3, -0.266667, 0], [3, 0.288889, 0]], [0.501576, [3, -0.288889, 0], [3, 0.266667, 0]], [0.501576, [3, -0.266667, 0], [3, 0.244444, 0]], [0.501576, [3, -0.244444, 0], [3, 0.266667, 0]], [0.501576, [3, -0.266667, 0], [3, 0.133333, 0]], [0.50311, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("LWristYaw")
    times.append([1.2])
    keys.append([[-1.01862, [3, -0.422222, 0], [3, 0, 0]]])

    names.append("RAnklePitch")
    times.append([1.2, 1.6])
    keys.append([[-0.207048, [3, -0.422222, 0], [3, 0.133333, 0]], [-0.207048, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RAnkleRoll")
    times.append([1.2, 1.6])
    keys.append([[0.032256, [3, -0.422222, 0], [3, 0.133333, 0]], [0.032256, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RElbowRoll")
    times.append([1.2, 1.86667, 2.06667, 2.26667, 2.73333, 2.93333, 3.46667, 3.73333, 4.4, 4.6, 5.2, 5.4, 6, 6.2, 6.8, 7, 7.53333, 7.73333, 8.33333, 8.53333, 9.13333, 9.33333, 9.93333, 10.1333, 10.7333, 10.9333, 11.6, 11.8, 12.4, 12.6, 13.2, 13.3333, 13.9333, 14.1333, 14.5333])
    keys.append([[1.03242, [3, -0.422222, 0], [3, 0.222222, 0]], [0.523136, [3, -0.222222, 0], [3, 0.0666667, 0]], [1.22264, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.155556, 0]], [1.22264, [3, -0.155556, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.177778, 0]], [1.22264, [3, -0.177778, 0], [3, 0.0888889, 0]], [0.681137, [3, -0.0888889, 0], [3, 0.222222, 0]], [1.22264, [3, -0.222222, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.2, 0]], [1.22264, [3, -0.2, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.2, 0]], [1.22264, [3, -0.2, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.2, 0]], [1.22264, [3, -0.2, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.177778, 0]], [1.22264, [3, -0.177778, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.2, 0]], [1.22264, [3, -0.2, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.2, 0]], [1.22264, [3, -0.2, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.2, 0]], [1.22264, [3, -0.2, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.2, 0]], [1.22264, [3, -0.2, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.222222, 0]], [1.22264, [3, -0.222222, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.2, 0]], [1.22264, [3, -0.2, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.2, 0]], [1.22264, [3, -0.2, 0], [3, 0.0444444, 0]], [0.681137, [3, -0.0444444, 0], [3, 0.2, 0]], [1.22264, [3, -0.2, 0], [3, 0.0666667, 0]], [0.681137, [3, -0.0666667, 0], [3, 0.133333, 0]], [1.11066, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RElbowYaw")
    times.append([1.2, 1.86667, 2.06667, 2.26667, 2.73333, 2.93333, 3.46667, 3.73333, 4.4, 4.6, 5.2, 5.4, 6, 6.2, 6.8, 7, 7.53333, 7.73333, 8.33333, 8.53333, 9.13333, 9.33333, 9.93333, 10.1333, 10.7333, 10.9333, 11.6, 11.8, 12.4, 12.6, 13.2, 13.3333, 13.9333, 14.1333, 14.5333])
    keys.append([[0.265341, [3, -0.422222, 0], [3, 0.222222, 0]], [-0.029188, [3, -0.222222, 0], [3, 0.0666667, 0]], [0.408002, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.155556, 0]], [0.408002, [3, -0.155556, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.177778, 0]], [0.408002, [3, -0.177778, 0], [3, 0.0888889, 0]], [-0.138102, [3, -0.0888889, 0], [3, 0.222222, 0]], [0.408002, [3, -0.222222, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.2, 0]], [0.408002, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.2, 0]], [0.408002, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.2, 0]], [0.408002, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.177778, 0]], [0.408002, [3, -0.177778, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.2, 0]], [0.408002, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.2, 0]], [0.408002, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.2, 0]], [0.408002, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.2, 0]], [0.408002, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.222222, 0]], [0.408002, [3, -0.222222, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.2, 0]], [0.408002, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.2, 0]], [0.408002, [3, -0.2, 0], [3, 0.0444444, 0]], [-0.138102, [3, -0.0444444, 0], [3, 0.2, 0]], [0.408002, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.138102, [3, -0.0666667, 0], [3, 0.133333, 0]], [0.391128, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RHand")
    times.append([1.2, 1.86667])
    keys.append([[0.918933, [3, -0.422222, 0], [3, 0.222222, 0]], [0.452752, [3, -0.222222, 0], [3, 0, 0]]])

    names.append("RHipPitch")
    times.append([1.2, 1.6])
    keys.append([[-0.032256, [3, -0.422222, 0], [3, 0.133333, 0]], [-0.032256, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RHipRoll")
    times.append([1.2, 1.6])
    keys.append([[-0.016832, [3, -0.422222, 0], [3, 0.133333, 0]], [-0.016832, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RKneePitch")
    times.append([1.2, 1.6])
    keys.append([[0.55535, [3, -0.422222, 0], [3, 0.133333, 0]], [0.55535, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RShoulderPitch")
    times.append([1.2, 1.86667, 2.06667, 2.26667, 2.73333, 2.93333, 3.46667, 3.73333, 4.4, 4.6, 5.2, 5.4, 6, 6.2, 6.8, 7, 7.53333, 7.73333, 8.33333, 8.53333, 9.13333, 9.33333, 9.93333, 10.1333, 10.7333, 10.9333, 11.6, 11.8, 12.4, 12.6, 13.2, 13.3333, 13.9333, 14.1333, 14.5333])
    keys.append([[0.906636, [3, -0.422222, 0], [3, 0.222222, 0]], [0.868286, [3, -0.222222, 0], [3, 0.0666667, 0]], [0.92351, [3, -0.0666667, -0.0112495], [3, 0.0666667, 0.0112495]], [0.935783, [3, -0.0666667, 0], [3, 0.155556, 0]], [0.92351, [3, -0.155556, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.177778, 0]], [0.92351, [3, -0.177778, 0], [3, 0.0888889, 0]], [0.935783, [3, -0.0888889, 0], [3, 0.222222, 0]], [0.92351, [3, -0.222222, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.2, 0]], [0.92351, [3, -0.2, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.2, 0]], [0.92351, [3, -0.2, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.2, 0]], [0.92351, [3, -0.2, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.177778, 0]], [0.92351, [3, -0.177778, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.2, 0]], [0.92351, [3, -0.2, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.2, 0]], [0.92351, [3, -0.2, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.2, 0]], [0.92351, [3, -0.2, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.2, 0]], [0.92351, [3, -0.2, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.222222, 0]], [0.92351, [3, -0.222222, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.2, 0]], [0.92351, [3, -0.2, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.2, 0]], [0.92351, [3, -0.2, 0], [3, 0.0444444, 0]], [0.935783, [3, -0.0444444, 0], [3, 0.2, 0]], [0.92351, [3, -0.2, 0], [3, 0.0666667, 0]], [0.935783, [3, -0.0666667, 0], [3, 0.133333, 0]], [0.89283, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RShoulderRoll")
    times.append([1.2, 1.86667, 2.06667, 2.26667, 2.73333, 2.93333, 3.46667, 3.73333, 4.4, 4.6, 5.2, 5.4, 6, 6.2, 6.8, 7, 7.53333, 7.73333, 8.33333, 8.53333, 9.13333, 9.33333, 9.93333, 10.1333, 10.7333, 10.9333, 11.6, 11.8, 12.4, 12.6, 13.2, 13.3333, 13.9333, 14.1333, 14.5333])
    keys.append([[-0.185656, [3, -0.422222, 0], [3, 0.222222, 0]], [-0.101286, [3, -0.222222, -0.0275333], [3, 0.0666667, 0.00826]], [-0.0782759, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.155556, 0]], [-0.0782759, [3, -0.155556, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.177778, 0]], [-0.0782759, [3, -0.177778, 0], [3, 0.0888889, 0]], [-0.16418, [3, -0.0888889, 0], [3, 0.222222, 0]], [-0.0782759, [3, -0.222222, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.0782759, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.0782759, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.0782759, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.177778, 0]], [-0.0782759, [3, -0.177778, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.0782759, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.0782759, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.0782759, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.0782759, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.222222, 0]], [-0.0782759, [3, -0.222222, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.0782759, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.2, 0]], [-0.0782759, [3, -0.2, 0], [3, 0.0444444, 0]], [-0.16418, [3, -0.0444444, 0], [3, 0.2, 0]], [-0.0782759, [3, -0.2, 0], [3, 0.0666667, 0]], [-0.16418, [3, -0.0666667, 0], [3, 0.133333, 0]], [-0.075208, [3, -0.133333, 0], [3, 0, 0]]])

    names.append("RWristYaw")
    times.append([1.2, 1.86667])
    keys.append([[0.961776, [3, -0.422222, 0], [3, 0.222222, 0]], [0.682588, [3, -0.222222, 0], [3, 0, 0]]])

    try:
    # uncomment the following line and modify the IP if you use this script outside Choregraphe.
    # motion = ALProxy("ALMotion", IP, 9559)
        motion = ALProxy("ALMotion", robotIP, port)
        motion.angleInterpolationBezier(names, times, keys)
    except BaseException, err:
        print err


if __name__ == "__main__":

    robotIP = "127.0.0.1" #"192.168.1.11"

    port = 9559 # Insert NAO port

    if len(sys.argv) == 2:
        robotIP = sys.argv[1]
    elif len(sys.argv) > 2:
        port = int(sys.argv[2])
        robotIP = sys.argv[1]

    main(robotIP, port)